<?php
// +----------------------------------------------------------------------
// | User 用户操作
// +----------------------------------------------------------------------
// | Author: 2851986856@qq.com
// +----------------------------------------------------------------------

namespace app\jiaju\controller;

use app\common\controller\JiajuBase;
use app\common\enums\ApiConfig;
use app\common\logic\CollectLogic;
use app\common\logic\JjdgGoodsLogic;
use app\common\logic\ScoreLogic;
use app\common\model\JjdgGoodsCollection;
use app\common\model\JjdgGoodsGrade;

class User extends JiajuBase
{
    //自定义信息
    static protected $RETURNMSG = [
        0 => '修改成功!',
        1 => '修改失败!',
        2 => '昵称不能为空!',
        3 => '手机验证码不能为空!',
        4 => '手机不能为空!',
        5 => '密码不能为空!',
        6 => '重复密码不能为空!',
        7 => '请求错误，请重试!',
        8 => '操作成功!',
        9 => '操作失败!',
        10 => '性别不能为空!',
        11 => '地区未选择',
        12 => '当前账号手机不正确',
    ];
    protected $userinfo;
    protected $user_model;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (empty($this->user['id'])) {
            if ($this->request->isAjax()) {
                exit(json_encode(['status' => ApiConfig::NOT_LOGGED_IN, 'info' => '请先登陆~']));
            }else{
                //没有登录，跳转到首页界面
                $this->redirect(url('jiaju/index/index',[],''));
            }
        }
        $this->userinfo = cache('Cache:User:ID' . $this->user['id']);
        if (empty($this->userinfo)) {
            $this->userinfo = model('User')->find($this->user['id'])->toArray();
            $this->userinfo['city_area'] = model('Area')->getFullAreaById($this->userinfo['qx']);
            //去掉密码
            unset($this->userinfo['pass']);
            cache('Cache:User:ID' . session('u_userInfo.id'), $this->userinfo);
        }
        $this->assign("user", $this->userinfo);
        $this->user_model = model('User');
    }

    /**
     * 个人中心入口页面
     */
    public function index()
    {
        return $this->fetch();
    }


    /**
     * 昵称修改接口
     */
    public function changeNick()
    {
        $nick_name = input('post.nick_name');
        if (empty($nick_name)) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[2]]);
        }
        $up = $this->user_model->edtiUserInfo($this->userinfo['id'],['name' => $nick_name]);
        if ($up !== false) {
            cache('Cache:User:ID' . $this->userinfo['id'], null);
            session('u_userInfo.name', $nick_name);
            $return = ['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[0]];
        } else {
            $return = ['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[1]];
        }
        return json($return);
    }

    /**
     * 手机修改接口
     */
    public function changeMobile()
    {
        $data['tel'] = input('post.tel');
        $data['code'] = input('post.code');
        if (empty($data['code'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[3]]);
        }
        if (empty($data['tel'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[4]]);
        }
        //验证手机验证码
        $check = checkSafeCode($data);
        if ($check['status'] == 0) {
            return json($check);
        }
        $up =  $up = $this->user_model->edtiUserInfo($this->userinfo['id'],['tel_safe' => $data['tel'], 'tel' => $data['tel'], 'tel_safe_chk' => 1]);
        if ($up !== false) {
            cache('Cache:User:ID' . $this->userinfo['id'], null);
            $return = ['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[0]];
        } else {
            $return = ['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[1]];
        }
        return json($return);
    }

    //修改密码第一步验证手机号码
    public function checkCode()
    {
        $data['tel'] = input('post.tel');
        $data['code'] = input('post.code');
        if (empty($data['code'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[3]]);
        }
        if (empty($data['tel'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[4]]);
        }
        if ($data['tel'] != $this->userinfo['tel_safe']){
            session('safecode',null);
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[12]]);
        }
        //验证第一步手机验证码(正确不会清除session，方便下一步调用)
        $check = checkOneStepSafeCode($data);
        return json($check);
    }
    /**
     * 密码修改接口(增加手机号码验证)
     */
    public function changePwd()
    {
        $data['tel'] = input('post.tel');
        $data['code'] = input('post.code');
        if (empty($data['code'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[3]]);
        }
        if (empty($data['tel'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[4]]);
        }
        if ($data['tel'] != $this->userinfo['tel_safe']){
            session('safecode',null);
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[12]]);
        }
        //验证手机验证码
        $check = checkSafeCode($data);
        if ($check['status'] == 0) {
            return json($check);
        }
        $password = input('post.pwd');
        $rpwd = input('post.rpwd');
        if (empty($password) || empty($rpwd)) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[5]]);
        }
        if ($password !== $rpwd) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[6]]);
        }
        $up = $this->user_model->edtiUserInfo($this->userinfo['id'],['pass' => $password]);
        if ($up !== false) {
            $return = ['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[0]];
        } else {
            $return = ['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[1]];
        }
        return json($return);
    }

    /**
     * 用户商品收藏界面
     */
    public function store(JjdgGoodsLogic $JjdgGoodsLogic,ScoreLogic $scoreLogic,CollectLogic $collectLogic)
    {
        $where['c.user_id'] = $this->userinfo['id'];
        $where['g.on_sale'] = 1;
        $where['g.is_del'] = 2;
        //关联商品查询所有收藏
        $list = $JjdgGoodsLogic->getCollectGoodsByPage($where,10);
        $this->assign("list", $list);
        //推荐商品
        $recomGoods = cache('Cache:RecomGoods:limit-4');
        if (empty($recomGoods)){
            $recomGoods = $JjdgGoodsLogic->selectRecommendData(4);
            foreach ($recomGoods as $key=>$vo){
                $recomGoods[$key]['custom_score'] = $scoreLogic->getGoodsScoreAvg($vo);
                $recomGoods[$key]['collect_num'] = $collectLogic->getGoodsCollectNum($vo);
            }
            //推荐商品
            cache('Cache:RecomGoods:limit-4',$recomGoods,['expire'=>900],'jjdg_goods'); //设置5分钟过期
        }

        $this->assign('recom_goods', $recomGoods);
        return $this->fetch();
    }

    /**
     * 取消收藏接口
     */
    public function cancelCollect()
    {
        $code = input('code', '');
        if (empty($code)) {
            return json(['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[7]]);
        }
        $where['user_id'] = $this->userinfo['id'];
        $where['goods_code'] = $code;
        //删除用户收藏信息
        $delete = model('JjdgGoodsCollection')->cancelCollectById($this->userinfo['id'],$code);
        if ($delete !== false) {
            $return = ['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[8]];
        } else {
            $return = ['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[9]];
        }
        return json($return);
    }

    /**
     * 修改性别接口
     */
    public function changeSex()
    {
        $sex = input('post.sex');
        if (empty($sex)) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[10]]);
        }
        $up = $this->user_model->edtiUserInfo($this->userinfo['id'],['sex' => $sex]);
        if ($up !== false) {
            cache('Cache:User:ID' . $this->userinfo['id'], null);
            session('u_userInfo.sex', $sex);
            $return = ['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[0]];
        } else {
            $return = ['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[1]];
        }
        return json($return);
    }

    /**
     * 修改性别接口
     */
    public function changeArea()
    {
        $area['cs'] = input('post.cs');   //城市ID
        $area['qx'] = input('post.qx');   //城市下面的地区ID
        if (empty($area['cs']) || empty($area['qx'])) {
            return json(['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[11]]);
        }
        $up = $this->user_model->edtiUserInfo($this->userinfo['id'],$area);
        if ($up !== false) {
            cache('Cache:User:ID' . $this->userinfo['id'], null);
            session('u_userInfo.cs', $area['cs']);
            session('u_userInfo.qx', $area['qx']);
            $return = ['status' => ApiConfig::REQUEST_SUCCESS, 'info' => self::$RETURNMSG[0]];
        } else {
            $return = ['status' => ApiConfig::REQUEST_FAILL, 'info' => self::$RETURNMSG[1]];
        }
        return json($return);
    }

    /***
     * 用户收藏
     */
    public function collect()
    {
        $data = input('post.');
        $validate = validate('JjdgCollect');
        if (!$validate->scene('make')->check($data)) {
            return json(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => $validate->getError()]);
        }
        $where = [
            'goods_code' => $data['code'],
            'user_id' => $this->userinfo['id'],
        ];
        $collect = JjdgGoodsCollection::where($where)->find();
        if ($collect == null) {
            $collect = new JjdgGoodsCollection($where);
            $collect->save();
            return json(['status' => ApiConfig::COLLECT_IN, 'info' => '收藏成功']);
        }
        $collect->delete();
        return json(['status' => ApiConfig::COLLECT_OUT, 'info' => '取消收藏成功']);
    }

    /**
     *商品评分
     */
    public function score()
    {
        $data = input('post.');
        $validate = validate('JjdgScore');
        if (!$validate->scene('make')->check($data)) {
            return json(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => $validate->getError()]);
        }
        $where = [
            'goods_code' => $data['code'],
            'user_id' => $this->userinfo['id'],
        ];
        $grade = JjdgGoodsGrade::where($where)->find();
        if ($grade != null) {
            return json(['status' => ApiConfig::HAS_SCORE, 'info' => '该用户已经评过分']);
        }
        $insert = array_merge($where, ['score' => $data['score']]);
        $grade = new JjdgGoodsGrade($insert);
        $grade->save();
        return json(['status' => ApiConfig::REQUEST_SUCCESS, 'info' => '评分成功']);
    }
}