<?php
// +----------------------------------------------------------------------
// | cate 分类列表
// +----------------------------------------------------------------------
namespace app\jiajum\controller;

use app\common\controller\JiajumBase;
use app\common\logic\CateLogic;
use app\common\logic\JjdgGoodsLogic;

class Cate extends JiajumBase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 分类列表页面，增加筛选
     * @param JjdgGoodsLogic $jjdgGoodsLogic
     * @return mixed
     */
    public function index(JjdgGoodsLogic $jjdgGoodsLogic, CateLogic $cateLogic)
    {
        $catePinYin = input('cate', '');
        if (empty($catePinYin)) {
            return $this->_empty();
        }
        $goodsWhere = [];
        $find = '';
        if ($catePinYin === 'all') {
            $topCate = model('JjdgGoodsTopCate')->getListByWhere(['is_lock' => 1]);
            $this->assign('top', $topCate);
            $title = '所有分类';
            $keyword = '所有分类';
            $description = '所有分类';
        } else {
            $topCate = model('JjdgGoodsTopCate')->getInfoByWhere(['short_name' => $catePinYin]);
            if (empty($topCate)) {
                //此处是子级分类
                $param = input('par', '');
                if (!preg_match('/^([a-z]{1}\d+)*$/', $param)) {
                    //分类不存在返回404页面
                    return $this->_empty();
                }
                //根据子分类短名称获取子分类的TDK和修改后的参数和规格
                $result = $cateLogic->getSubcate($catePinYin, $param);
                if ($result == null) {
                    //分类不存在返回404页面
                    return $this->_empty();
                }
                //分析参数返回新的TDK和修改后的参数和规格
                $title = $result['title'];
                $keyword = $result['keyword'];
                $description = $result['description'];

                //拼接查询语句
                if (!empty($result['canshuarray'])) {
                    $find .= '(';
                    foreach ($result['canshuarray'] as $keys => $va) {
                        $find .= "FIND_IN_SET('$va',spec_values)";
                        if (isset($result['canshuarray'][$keys + 1])) {
                            $find .= 'AND ';
                        }
                    }
                    $find .= ')';
                }
                //拼接查询条件
                $goodsWhere['g.sub_cate_id'] = $result['subcate']['id'];

                $this->assign('spec', $result['spec']);
                $this->assign('parent', $result['subcate']);
                $this->assign('canshuArray', $result['canshuarray']);

                $template = 'cate';  //使用新的模板
            } else {    //此处是顶级分类
                //TDK
                $title = $topCate['name'] . '品牌_' . $topCate['name'] . '价格_' . $topCate['name'] . '尺寸图片大全_齐装家具网上商城';
                $keyword = $topCate['name'] . '家具,' . $topCate['name'] . '家具品牌,' . $topCate['name'] . '家具价格,' . $topCate['name'] . '家具尺寸,' . $topCate['name'] . '家具图片';
                $description = $topCate['description'];

                //顶级分类下的子分类
                $subCate = model('JjdgGoodsSubCate')->getListByWhere(['pid' => $topCate['id'], 'is_lock' => 1]);
                $goodsWhere['g.top_cate_id'] = $topCate['id'];
                $this->assign('sub', $subCate);
            }
        }
        //搜索的关键词
        $search = input('keyword', '');
        //排序规则
        $order = input('o', '0');
        $priceOrderType = 2;
        switch (intval(input('o', '0'))) {
            case 1:
                $orderBy = 'volume desc'; //销量递减
                break;
            case 2:
                $orderBy = 'zk_final_price asc'; //单价递增
                $priceOrderType = 3;
                break;
            case 3:
                $orderBy = 'zk_final_price desc'; //单价递减
                $priceOrderType = 2;
                break;
            default:
                $orderBy = '';  //默认排序规则
                break;
        }

        if (!empty($search)) {
            $goodsWhere['g.title|g.keywords'] = ['like', "%$search%"];
            $title = "搜索{$search}结果页-齐装家具网上商城";
            $keyword = $search;
            $description = $search;
        }
        //需要关联的数据
        $find_with = [
            'goodsImgs',
            'goodsSubCate' => function ($query) {
                $query->field('id,short_name');
            }
        ];
        if (empty($orderBy)) {
            $goodsList = $jjdgGoodsLogic->getListByWhereMultipleOrder($goodsWhere, $find_with, input('page', 1), input('pageSize', 20), $find);
        } else {
            $goodsList = $jjdgGoodsLogic->getListByWhere($goodsWhere, $orderBy, $find_with, input('page', 1), input('pageSize', 20), $find);
        }
        $this->assign('search', $search);
        $this->assign('title', $title);     //T
        $this->assign('keywords', $keyword);     //D
        $this->assign('description', $description);     //K

        $this->assign('priceType', $priceOrderType);
        $this->assign('selected', intval($order));
        $this->assign('catePinYin', $catePinYin);

        $this->assign('query', getUrlQuery(convertUrlQuery($this->request->query())));
        if (empty($goodsList)) {
            //如果结果为空
            $this->assign('recommend', $jjdgGoodsLogic->getSearchRecommend());
        }
        if (isset($template)) {
            $this->assign('list', $goodsList);
            return $this->fetch($template);
        } else {
            if (empty($goodsList)) {
                return view('search_empty');
            }
            $this->assign('list', $goodsList);
            return $this->fetch();
        }
    }

    /**
     * 异步加载获取列表页
     * @param JjdgGoodsLogic $jjdgGoodsLogic
     * @return mixed|\think\response\Json
     */
    public function getList(JjdgGoodsLogic $jjdgGoodsLogic, CateLogic $cateLogic)
    {
        $catePinYin = input('cate', '');
        if (empty($catePinYin)) {
            return $this->_empty();
        }
        $goodsWhere = [];
        $find = '';
        if ($catePinYin !== 'all') {
            $topCate = model('JjdgGoodsTopCate')->getInfoByWhere(['short_name' => $catePinYin]);
            if (empty($topCate)) {
                //此处是子级分类
                $param = input('par', '');
                //根据子分类短名称获取子分类的TDK和修改后的参数和规格
                $result = $cateLogic->getSubcate($catePinYin, $param);
                if ($result == null) {
                    //分类不存在返回404页面
                    return $this->_empty();
                }
                //拼接查询语句
                if (!empty($result['canshuarray'])) {
                    $find .= '(';
                    foreach ($result['canshuarray'] as $keys => $va) {
                        $find .= "FIND_IN_SET('$va',spec_values)";
                        if (isset($result['canshuarray'][$keys + 1])) {
                            $find .= 'AND ';
                        }
                    }
                    $find .= ')';
                }
                //拼接查询条件
                $goodsWhere['g.sub_cate_id'] = $result['subcate']['id'];
            } else {
                //顶级分类下的子分类
                $goodsWhere['g.top_cate_id'] = $topCate['id'];
            }
        }
        //搜索的关键词
        $keyword = input('keyword', '');
        //排序规则
        $order = input('o', '0');

        switch (intval($order)) {
            case 1:
                $orderBy = 'volume desc'; //销量递减
                break;
            case 2:
                $orderBy = 'zk_final_price asc'; //单价递增
                break;
            case 3:
                $orderBy = 'zk_final_price desc'; //单价递减
                break;
            default:
                $orderBy = '';  //默认排序规则
                break;
        }
        if (!empty($keyword)) {
            $goodsWhere['g.title|g.keywords'] = ['like', "%$keyword%"];
        }
        //需要关联的数据
        $find_with = [
            'goodsImgs',
            'goodsSubCate' => function ($query) {$query->field('id,short_name');}
        ];
        if (empty($orderBy)) {
            $goodsList = $jjdgGoodsLogic->getListByWhereMultipleOrder($goodsWhere, $find_with, input('page', 2), input('pageSize', 20), $find);
        } else {
            $goodsList = $jjdgGoodsLogic->getListByWhere($goodsWhere, $orderBy, $find_with, input('page', 2), input('pageSize', 20), $find);
        }
//        $data = $this->fetch('list',['list'=>$goodsList]);
//        return json(['status'=>empty($goodsList)?0:1,'data'=>$data]);
        return json(['status' => empty($goodsList) ? 0 : 1, 'data' => $goodsList]);
    }

}