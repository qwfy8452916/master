<?php

namespace User\Controller;

use Common\Enums\ApiConfig;
use Common\Enums\LiangFangInfo;
use Common\Enums\OrderStatus;
use User\Common\Controller\CompanyBaseController;

class OrdersController extends CompanyBaseController
{
    protected $company_name;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->company_name = empty(session('u_userInfo.jc')) ? session('u_userInfo.qc') : session('u_userInfo.jc');
    }

    public function index()
    {
        $user = session('u_userInfo');
        if (IS_POST) {
            $pass = I("post.pass");
            //查看该用户目前是否是被锁状态
            $log = D("Logorderpass")->getLastLockLog($user["id"]);
            if (count($log) > 0) {
                if ($log["is_lock"] == 1 && $log["unlock_time"] > time()) {
                    $this->ajaxReturn(["data" => "", "info" => "订单查看功能被锁中,预计可看订单时间为" . date("Y-m-d H:i:s", $log["unlock_time"]), 'status' => 2]);
                }
            }

            //查询装修公司的订单查看密码
            $orderPass = D("Orderpass")->getOrderPassById($user["id"]);

            if (!empty($orderPass)) {
                //查看订单日志
                $logData = [
                    "company_id" => $user["id"],
                    "company_name" => $this->company_name,
                    "act_name" => "输入密码查看订单",
                    "act_status" => "success",
                    "act_time" => time(),
                    "is_lock" => 0
                ];

                //记录用户操作日志
                import('Library.Org.Util.App');
                $app = new \App();
                $data = [
                    "userid" => $user["id"],
                    "username" => $this->company_name,
                    "ip" => $app->get_client_ip(),
                    "status" => 2,
                    "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                    "info" => "用户查看订单 失败",
                    "time" => date("Y-m-d H:i:s"),
                    "action" => CONTROLLER_NAME . "/" . ACTION_NAME
                ];

                if ($orderPass["pass"] == md5($pass)) {
                    $msg = $data["info"] = "用户查看订单 成功";
                    //修改返回状态/日志状态/session认证
                    $data["status"] = $status = $_SESSION['u_userInfo']['orderpass'] = 1;
                } else {
                    $logData["act_status"] = 'failed';
                    //查询上两次的查看状态
                    $logCount = D("Logorderpass")->getLastTwiceLockStatus($user["id"]);
                    if ($logCount[0]["lockcount"] == 2) {
                        $logData["is_lock"] = 1;
                        //锁定时间
                        $logData["lock_time"] = time();
                        //解锁时间
                        $logData["unlock_time"] = strtotime("+10 minutes");
                    }
                    $msg = '查看订单密码不正确,请重新输入';
                    $status = 2;
                }
                //写入查看订单日志
                D("Logorderpass")->saveLog($logData);
                //写入用户操作日志
                D("Loguser")->addLog($data);
                $this->ajaxReturn(array("data" => "", "info" => $msg, "status" => $status));
            } else {
                $this->ajaxReturn(array("data" => "", "info" => "您还没有设置密码,请先设置密码", "status" => 2));
            }
        } else {
            if (empty($_SESSION['u_userInfo']['orderpass'])) {
                //获取二维码
                $qrLoginImg = $this->getMyLoginQrCode();
                $this->assign('qrLoginImg', $qrLoginImg['img']);
            }
            //查询用户信息
            //获取装修公司的基本信息
            $info["user"] = $this->baseInfo;
            $info["user"]["orderpass"] = $_SESSION['u_userInfo']['orderpass'];
            //如果查看订单的标识存在,查询该公司的订单
            if (!empty($user["orderpass"])) {
                //权限通过后，查看该公司管理员是否有需要弹窗提示的 处理的单
                $has_remind = S('company_order_remind' . $user['id'] . date('Y-m-d'));
                if ($has_remind != 1) {
                    //查找需要提示的装修单
                    $remind_order = D("Common/Logic/OrderInfoLogic")->getRemindOrder($user['id']);
                    $this->assign('remind_order', $remind_order);
                    //标记该公司管理员今日已经提示
                    S('company_order_remind' . $user['id'] . date('Y-m-d'), 1, 60 * 60 * 24);
                }
                //是否开启订单提醒弹窗
                $remind = empty($remind_order) ? 0 : 1;
                $this->assign('remind', $remind);
                $this->assign('user', $user);
                
                //读取量房失败原因数据
                $liang_reason = LiangFangInfo::getAllFalseReason();
                $this->assign('reason', $liang_reason);

                //计算装修公司未处理单的数
                $need_to_do_num = D("Common/Logic/OrderInfoLogic")->getNeedToDo($user['id']);
                $this->assign('need_to_do_num', $need_to_do_num);

                $pageIndex = 1;
                $pageCount = 10;
                if (I("get.p") !== "") {
                    $pageIndex = I("get.p");
                }

                if (I("get.isread") !== "") {
                    $isread = I("get.isread");
                    if ($isread != 0 && $isread != 1) {
                        $isread = "";
                    }
                    $info['orderInfo']["isread"] = $isread;
                }

                if (I("get.keyword") !== "") {
                    $text = I("get.keyword");
                    $info['orderInfo']["keyword"] = $text;
                }

                $orders = $this->getOrders($user["id"], $text, $isread, $pageIndex, $pageCount);
                $info['orderInfo']["orderlist"] = $orders["orders"];
                $info['orderInfo']["page"] = $orders["page"];
                //订单筛选条件
                $readStatus = array(
                    array("value" => "-1", "name" => "全部"),
                    array("value" => "1", "name" => "已读"),
                    array("value" => "0", "name" => "未读"),
                );
                $info['orderInfo']["readStatus"] = $readStatus;
                //添加修改密码提醒(每隔60天修改一次密码)
                $this->checkPassTime($info['user']);
            } else {
                //查询装修公司是否有订单密码记录
                $orderpass = D("Orderpass")->getOrderPassById($info["user"]["id"]);
                if (count($orderpass) == 0) {
                    $info["passinit"] = 1;
                }
            }
            $this->assign("info", $info);
            $state = [
                "1" => "已量房",
                "2" => "已见面/已到店",
                "3" => "未量房",
            ];
            $this->assign("state", $state);
            //侧边栏
            $this->assign("nav", 3);

            $this->display();
        }
    }

    /**
     * 查看订单验证轮询
     * @return mixed
     */
    public function logining()
    {
        import('Library.Org.Util.Mywechat');
        $Mywechat = new \Mywechat();
        $result = $Mywechat->wxscanstatusforlogin();
        $user = session('u_userInfo');
        import('Library.Org.Util.App');
        $app = new \App();
        if ($result['status'] == 2) {
            //写入登陆成功session
            $_SESSION['u_userInfo']['orderpass'] = 1;
            //记录用户操作日志
            $data = [
                'userid' => $user['id'],
                'username' => $this->company_name,
                'ip' => $app->get_client_ip(),
                'status' => 1,
                'user_agent' => $_SERVER['HTTP_USER_AGENT'],
                'info' => '微信查看订单成功',
                'time' => date('Y-m-d H:i:s'),
                'action' => CONTROLLER_NAME . '/' . ACTION_NAME
            ];
            //写入用户操作日志
            D('Loguser')->addLog($data);
        } elseif($result['status'] == 1 && $result['info'] == '用户微信未绑定') {
            //获取最近一次相同记录
            $lastRecentLog = D('Loguser')->getLastLogWithAction($user['id'], CONTROLLER_NAME . '/' . ACTION_NAME,'微信查看订看失败（未绑定微信）');
            //上次日志时间大于5分钟，则进行日志记录
            if (empty($lastRecentLog) || time() - strtotime($lastRecentLog['time']) > 300) {
                //记录用户操作日志
                $data = [
                    'userid' => $user['id'],
                    'username' => $this->company_name,
                    'ip' => $app->get_client_ip(),
                    'status' => 2,
                    'user_agent' => $_SERVER['HTTP_USER_AGENT'],
                    'info' => '微信查看订看失败（未绑定微信）',
                    'time' => date('Y-m-d H:i:s'),
                    'action' => CONTROLLER_NAME . '/' . ACTION_NAME
                ];
                //写入用户操作日志
                D('Loguser')->addLog($data);
            }
        }
        $this->ajaxReturn($result);
    }
    /**
     * 修改订单查看密码
     * @return [type] [description]
     */
    public function orderchange()
    {
        if ($_POST) {
            $data = array(
                "pass" => I("post.password"),
                "confirmpassword" => I("post.confirmpassword")
            );
            $orderpass = D("Orderpass");
            if ($orderpass->create($data)) {
                $data["pass"] = md5($data["pass"]);
                //查询该公司的原查询密码,新密码不能和旧密码一致
                $pass = $orderpass->getOrderPassById($_SESSION["u_userInfo"]["id"]);
                if (count($pass) > 0) {
                    if ($pass["pass"] == $data["pass"]) {
                        $this->ajaxReturn(array("data" => "", "info" => "新密码不能和旧密码一致", "status" => 0));
                    }
                }

                //查询装修公司的登录密码，查询密码不能和登录密码一致
                $user = D("User")->getSingleUserInfoById($_SESSION["u_userInfo"]["id"]);

                if ($user["pass"] == $data["pass"]) {
                    $this->ajaxReturn(array("data" => "", "info" => "订单查看密码不能和登录密码一致", "status" => 0));
                }

                $i = $orderpass->editPass($_SESSION["u_userInfo"]["id"], $data);

                if ($i !== false) {
                    //导入扩展文件
                    import('Library.Org.Util.App');
                    $app = new \App();
                    //记录日志
                    $data = array(
                        "username" => $user["jc"],
                        "userid" => $user["id"],
                        "ip" => $app->get_client_ip(),
                        "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                        "info" => "用户修改订单查看密码 修改成功",
                        "time" => date("Y-m-d H:i:s"),
                        "action" => CONTROLLER_NAME . "/" . ACTION_NAME
                    );
                    D("Loguser")->addLog($data);
                    $this->ajaxReturn(array("data" => "", "info" => "", "status" => 1));
                }
                $this->ajaxReturn(array("data" => "", "info" => "操作失败！", "status" => 0));
            } else {
                $this->ajaxReturn(array("data" => "", "info" => $orderpass->getError(), "status" => 0));
            }
        } else {
            //获取装修公司的基本信息
            $info["user"] = $this->baseInfo;
            //判断用户绑定了是安全邮箱还是安全电话
            if ($info["user"]["tel_safe_chk"] && $info["user"]["mail_safe_chk"]) {
                //如果全部绑定默认发送电话
                $info["user"]["safe_account"] = "all";
            } elseif ($info["user"]["tel_safe_chk"]) {
                $info["user"]["safe_account"] = "tel";
            } elseif ($info["user"]["mail_safe_chk"]) {
                $info["user"]["safe_account"] = "mail";
            }
            $this->assign("info", $info);
            //侧边栏
            $this->assign("nav", 3);
            //tab栏
            $this->assign("tabNav", 4);
            $this->display();
        }
    }

    /**
     * 订单跟踪状态 弹窗接口
     * @return [type] [description]
     */
    public function changestate()
    {
        if ($_POST) {
            $post_data = I("post.", '', 'trim,htmlspecialchars');
            $data = array(
                "status" => I("post.state")
            );
            //表单验证
            if (empty($post_data['id']) || !is_numeric($post_data['id']) || !isset($post_data['state']) || !key_exists($post_data['state'], OrderStatus::getAllStatus())) {
                $this->ajaxReturn(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => '请求参数不合法']);
            }
            //验证已签约情况
            if ($post_data['state'] == OrderStatus::HAS_SIGN) {
                if (empty($post_data['qiandan_jine']) || !preg_match('/^\d+\.{0,1}\d{0,2}$/', $post_data['qiandan_jine'])) {
                    $this->ajaxReturn(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => '已签约参数不合法']);
                }
            }
            //判断该单是否有二次回访记录
            $num = D("Common/Logic/CompanyLiangFangCorrLogic")->countTwiceBackSimple($post_data['id'], session('u_userInfo'));
            if ($num != 0) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_STATUS_LOCK, 'info' => '该订单已为您推送至“回访订单”页面，请在“回访订单”页面修改该订单状态']);
            }
            $company_review_logic_obj = D("Common/Logic/OrderCompanyReviewLogic");
            $info = $company_review_logic_obj->getInfo($post_data['id'], session("u_userInfo.id"));
            //处理已签约订单的状态切换
            if (!empty($info) && $info['status'] == OrderStatus::HAS_SIGN) {
                $company_review_logic_obj->removeQianDan($post_data['id'], session('u_userInfo'));
            }

            //勾选已签订处理
            //已经签约状态逻辑处理
            if ($post_data['state'] == OrderStatus::HAS_SIGN) {
                //查询该订单是否已被申请
                $result = D("Orders")->getOrderInfoById($post_data['id']);
                if (empty($result)) {
                    $this->ajaxReturn(['status' => ApiConfig::ORDER_MISS, 'info' => '未找到该订单']);
                }
                if (!empty($result["qiandan_companyid"])) {
                    $this->ajaxReturn(['status' => ApiConfig::ORDER_HAS_SIGN, 'info' => '订单已被签约']);
                }
                if (strtotime("2013-10-01") > $result["time"]) {
                    $this->ajaxReturn(['status' => ApiConfig::ORDER_EXPIRE, 'info' => '该订单时间太久远了,已无法签单']);
                }
                //签单金额逻辑
                $sign_data = [
                    "qiandan_companyid" => session('u_userInfo')['id'],
                    "qiandan_jine" => $post_data['qiandan_jine'],
                    "qiandan_addtime" => time(),
                    "qiandan_info" => empty($post_data['qiandan_info']) ? '' : $post_data['qiandan_info'],
                    "qiandan_status" => 0
                ];
                if (D("Orders")->editOrder($post_data['id'], $sign_data) == false) {
                    $this->ajaxReturn(['status' => ApiConfig::REQUEST_FAILL, 'info' => '更新订单签单失败']);
                }
            }
            if (count($info) > 0) {
                $i = $company_review_logic_obj->editReview($post_data['id'], session("u_userInfo.id"), $data);
            } else {
                $data["comid"] = session("u_userInfo.id");
                $data["orderid"] = $post_data['id'];
                $i = $company_review_logic_obj->addReview($data);
            }

            if ($i !== false) {
                $company_review_logic_obj->OrderChangeLog($post_data['id'], session('u_userInfo'), $post_data['state'], 1);
                $this->ajaxReturn(array("status" => 1, 'info' => '操作成功'));
            }
            $this->ajaxReturn(array("status" => 0, "info" => "操作失败,请稍后再试！"));
        }
    }

    public function changeStateComplete()
    {
        $user = session('u_userInfo');
        $data = I("post.", '', 'trim,htmlspecialchars');
        // 表单验证
        $company_review_logic_obj = D("Common/Logic/OrderCompanyReviewLogic");
        $vaildate = $company_review_logic_obj->changeStateCompleteVail($data);
        if ($vaildate['res'] === false) {
            $this->ajaxReturn(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => $vaildate['msg']]);
        }
        //判断该单是否有二次回访记录
        $num = D("Common/Logic/CompanyLiangFangCorrLogic")->countTwiceBackSimple($data['id'], $user);
        if ($num != 0) {
            $this->ajaxReturn(['status' => ApiConfig::ORDER_STATUS_LOCK, 'info' => '该订单已为您推送至“回访订单”页面，请在“回访订单”页面修改该订单状态']);
        }
        //处理已签约订单的状态切换
        $company_review_logic_obj = D("Common/Logic/OrderCompanyReviewLogic");
        $info = $company_review_logic_obj->getInfo($data['id'], $user["id"]);
        if (!empty($info) && $info['status'] == OrderStatus::HAS_SIGN) {
            $company_review_logic_obj->removeQianDan($data['id'], $user);
        }
        //已经签约状态逻辑处理
        if ($data['state'] == OrderStatus::HAS_SIGN) {
            //查询该订单是否已被申请
            $result = D("Orders")->getOrderInfoById($data['id']);
            if (empty($result)) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_MISS, 'info' => '未找到该订单']);
            }
            if (!empty($result["qiandan_companyid"])) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_HAS_SIGN, 'info' => '订单已被签约']);
            }
            if (strtotime("2013-10-01") > $result["time"]) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_EXPIRE, 'info' => '该订单时间太久远了,已无法签单']);
            }
            //签单金额逻辑
            $sign_data = [
                "qiandan_companyid" => session('u_userInfo')['id'],
                "qiandan_jine" => $data['qiandan_jine'],
                "qiandan_addtime" => time(),
                "qiandan_info" => empty($data['qiandan_info']) ? '' : $data['qiandan_info'],
                "qiandan_status" => 0
            ];
            if (D("Orders")->editOrder($data['id'], $sign_data) == false) {
                $this->ajaxReturn(['status' => ApiConfig::REQUEST_FAILL, 'info' => '更新订单签单失败']);
            }
        }

        if ($company_review_logic_obj->replaceReview($data, $user) == false) {
            $this->ajaxReturn(['status' => ApiConfig::REQUEST_FAILL, 'info' => '修改订单状态失败']);
        }
        $company_review_logic_obj->OrderChangeLog($data['id'], $user, $data['state'], 1);
        $this->ajaxReturn(array("status" => 1, 'info' => '操作成功'));
    }


    public function changeRevisitState()
    {
        $user = session('u_userInfo');
        $data = I("post.", '', 'trim,htmlspecialchars');
        // 表单验证
        $company_review_logic_obj = D("Common/Logic/OrderCompanyReviewLogic");
        $vaildate = $company_review_logic_obj->changeStateCompleteVail($data);
        if ($vaildate['res'] === false) {
            $this->ajaxReturn(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => $vaildate['msg']]);
        }
        $company_review_logic_obj = D("Common/Logic/OrderCompanyReviewLogic");
        $info = $company_review_logic_obj->getInfo($data['id'], $user["id"]);
        //处理已签约订单的状态切换
        if (!empty($info) && $info['status'] == OrderStatus::HAS_SIGN) {
            $company_review_logic_obj->removeQianDan($data['id'], $user);
        }
        //已经签约状态逻辑处理
        if ($data['state'] == OrderStatus::HAS_SIGN) {
            //查询该订单是否已被申请
            $result = D("Orders")->getOrderInfoById($data['id']);
            if (empty($result)) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_MISS, 'info' => '未找到该订单']);
            }
            if (!empty($result["qiandan_companyid"])) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_HAS_SIGN, 'info' => '订单已被签约']);
            }
            if (strtotime("2013-10-01") > $result["time"]) {
                $this->ajaxReturn(['status' => ApiConfig::ORDER_EXPIRE, 'info' => '该订单时间太久远了,已无法签单']);
            }
            //  签单金额逻辑
            $sign_data = [
                "qiandan_companyid" => session('u_userInfo')['id'],
                "qiandan_jine" => $data['qiandan_jine'],
                "qiandan_addtime" => time(),
                "qiandan_info" => empty($data['qiandan_info']) ? '' : $data['qiandan_info'],
                "qiandan_status" => 0
            ];
            if (D("Orders")->editOrder($data['id'], $sign_data) == false) {
                $this->ajaxReturn(['status' => ApiConfig::REQUEST_FAILL, 'info' => '更新订单签单失败']);
            }
        }

        $liang_fang_corr_logic_obj = D("Common/Logic/CompanyLiangFangCorrLogic");
        if ($liang_fang_corr_logic_obj->updateCorr($data, $user) == false) {
            $this->ajaxReturn(['status' => ApiConfig::REQUEST_FAILL, 'info' => '修改订单状态失败']);
        }
        $company_review_logic_obj->OrderChangeLog($data['id'], $user, $data['state'], 2);
        $this->ajaxReturn(array("status" => 1, 'info' => '操作成功'));
    }


    public function ignoreOrder()
    {
        $user = session('u_userInfo');
        $order_id_array = I("post.order_id", '', 'trim,htmlspecialchars');
        //表单验证
        if (!is_array($order_id_array)) {
            $this->ajaxReturn(['status' => ApiConfig::PARAMETER_ILLEGAL, 'info' => '请求参数出错']);
        }
        D("Common/Logic/OrderInfoLogic")->ignoreOrder($order_id_array, $user['id']);
        $this->ajaxReturn(array("status" => 1, 'info' => '操作成功'));
    }

    /**
     * 验证绑定轮询
     * @return [type] [description]
     */
    public function polling()
    {
        import('Library.Org.Util.Mywechat');
        $Mywechat = new \Mywechat();
        $result = $Mywechat->wxscanstatus();
        if ($result["status"] == 3) {
            //重新绑定二维码
            $qr = $this->getMyQrCode();
            $result["data"] = $qr["img"];
        }
        $this->ajaxReturn($result);
    }

    /**
     * 解除绑定微信订单通知
     * @return [type] [description]
     */
    public function unbindwx()
    {

        if (IS_POST) {
            if (empty($this->baseInfo['id'])) {
                $this->ajaxReturn(["data" => "", "info" => "登录过期,请重新登录！", "status" => 0]);
            }
            if (isset($_POST["action"]) && strtolower($_POST["action"]) == "all") {
                $comid = $this->baseInfo['id'];
                $i = D("Orderwechar")->unbindWechat($comid);
            } else {
                $wx_unionid = I("post.id");
                $i = D("Orderwechar")->unbindWechat($wx_unionid);
            }

            if ($i !== false) {

                $this->addLog(['id' => $this->baseInfo['id'], 'name' => $this->baseInfo['user']], '微信解绑成功');
                $this->ajaxReturn(array("data" => "", "info" => "操作成功！", "status" => 1));
            } else {
                $this->addLog(['id' => $this->baseInfo['id'], 'name' => $this->baseInfo['user']], '微信解绑失败', 2);
                $this->ajaxReturn(array("data" => "", "info" => "操作失败！", "status" => 0));
            }
        }
        $this->ajaxReturn(array("data" => "", "info" => "未知错误！", "status" => 0));
    }

    /**
     * 微信接收订单
     * @return [type] [description]
     */
    public function wechat()
    {
        //侧边栏
        $this->assign("nav", 3);
        //tab栏
        $this->assign("tabNav", 3);
        //查询该公司已绑定的微信帐号
        //查询公司微信绑定的信息
        $wechatList = D("Orderwechar")->getOrderNoticeList($_SESSION["u_userInfo"]["id"]);
        if (!empty($wechatList)) {
            foreach ($wechatList as $key => $value) {
                $wx_unionid[] = $value["wx_openid"];
            }
            //过滤重复的数据
            $wx_unionid = array_unique($wx_unionid);
            import('Library.Org.Util.Mywechat');
            $Mywechat = new \Mywechat();
            $info["users"] = $Mywechat->getWecharUserInfo($wx_unionid);
        }
        $empty = '<p class="add-member-icon" data-type="add-btn">+</p>';
        //获取装修公司的基本信息
        $baseInfo = $this->baseInfo;
        //获取二维码
        $qr = $this->getMyQrCode();
        $info["qrimg"] = $qr["img"];
        $info["user"] = $baseInfo;
        $this->assign("empty", $empty);
        $info["wxcheckpass"] = $_SESSION["u_userInfo"]["wxcheckpass"];
        $this->assign("info", $info);
        $this->display();
    }

    /**
     * 我的订单查看订单详情
     * @return [type] [description]
     */
    public function lookorder()
    {
        $id = I("get.id");
        //修复老代码bug
        $info["user"] = $this->baseInfo;
        //查询该订单的分配信息
        $result = D("Orders")->getAllocationOrder($id, $_SESSION["u_userInfo"]["id"]);

        if (count($result) > 0) {
            $order = D("Orders")->getOrderInfoById($id);
            //查询订单信息
            if (count($order) > 0) {
                //获取分配的装修公司信息
                $tempResult = D("Orders")->getOrdersDistributionCompany($id);
                //此处调整排序，谁查看谁靠前
                $companys = array();
                foreach ($tempResult as $key => $value) {
                    if ($_SESSION["u_userInfo"]["id"] == $value['id']) {
                        array_unshift($companys, $value);
                    } else {
                        $companys[] = $value;
                    }
                }
                header("customer:error03", true);
                $order["companys"] = $companys;
                //获取签单的装修公司信息
                if (!empty($order["qiandan_companyid"])) {
                    foreach ($companys as $key => $value) {
                        if ($order["qiandan_companyid"] == $value["id"]) {
                            $order["qiandan_company_logo"] = $value["logo"];
                            $order["qiandan_company_jc"] = $value["jc"];
                            break;
                        }
                    }
                }

                //查询是否已读过订单
                $count = D("Orders")->getOrderReadCount($id, $_SESSION["u_userInfo"]["id"]);

                if ($count == 0) {
                    //修改阅读状态
                    $data = array(
                        "isread" => 1,
                        "readtime" => time()
                    );
                    D("Orders")->editOrderRead($id, $_SESSION["u_userInfo"]["id"], $data);
                    header("customer:error05", true);
                }
                $this->assign("order", $order);
                // $tmp = $this->fetch("ordertmp");
                //记录日志
                //记录 装修公司查看订单信息信息 日志
                //导入扩展文件
                import('Library.Org.Util.App');
                $app = new \App();
                $data = array(
                    "username" => $_SESSION["u_userInfo"]["jc"],
                    "userid" => $_SESSION["u_userInfo"]["id"],
                    "ip" => $app->get_client_ip(),
                    "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                    "info" => "查看订单详细信息",
                    "time" => date("Y-m-d H:i:s"),
                    "action" => CONTROLLER_NAME . "/" . ACTION_NAME,
                    "remark" => "订单号: " . $id
                );
                //记录查看订单情况
                D("Loguser")->addLog($data);

                //如果都已读 orders表 order2com_allread 字段记录下分配的所有订单都已读
                if (0 == $order['order2com_allread']) {
                    $isAllRead = D("Orders")->getOrderFenpeiAllIsRead($order['id']);
                    if ($isAllRead) { //如果都已读,那么修改字段order2com_allread 状态 为1
                        $data = array(
                            "order2com_allread" => 1
                        );
                        D("Orders")->editOrder($order['id'], $data);
                    }
                }

                $this->assign("referer", $_SERVER["HTTP_REFERER"]);
                $this->assign('info', $info);
                $this->assign('tabNav', 0);
                $this->assign('nav', 3);
                $this->display("orderdetails");
            }
        }

    }

    /**
     * 二次回访订单列表
     * author: mcj
     */
    public function viewBackOrder()
    {
        $id = I("get.id");
        $info["user"] = $this->baseInfo;
        //查询该订单的分配信息
        $result = D("Orders")->getAllocationOrder($id, $_SESSION["u_userInfo"]["id"]);
        if (count($result) > 0) {
            //查询订单信息
            $order = D("Orders")->getBackOrderInfoById($id);
            if (count($order) > 0) {
                //获取分配的装修公司信息
                $tempResult = D("Orders")->getOrdersDistributionCompany($id);
                //此处调整排序，谁查看谁靠前
                $companys = array();
                foreach ($tempResult as $key => $value) {
                    if ($_SESSION["u_userInfo"]["id"] == $value['id']) {
                        array_unshift($companys, $value);
                    } else {
                        $companys[] = $value;
                    }
                }
                $order["companys"] = $companys;
                //获取签单的装修公司信息
                if (!empty($order["qiandan_companyid"])) {
                    foreach ($companys as $key => $value) {
                        if ($order["qiandan_companyid"] == $value["id"]) {
                            $order["qiandan_company_logo"] = $value["logo"];
                            $order["qiandan_company_jc"] = $value["jc"];
                            break;
                        }
                    }
                }
                $liang_fang_logic = D("Common/Logic/CompanyLiangFangCorrLogic");

                //查询是否已读过订单
                $count = $liang_fang_logic->getOrderReadCount($id, $_SESSION["u_userInfo"]["id"]);

                if ($count > 0) {
                    //修改阅读状态
                    $liang_fang_logic->editOrderRead($id, $_SESSION["u_userInfo"]["id"]);
                }

                $this->assign("order", $order);

                //记录日志 装修公司查看订单信息信息 日志
                $company_review_logic_obj = D("Common/Logic/OrderCompanyReviewLogic");
                $company_review_logic_obj->OrderChangeLog($id, $_SESSION["u_userInfo"], 99, 2);
                $this->assign('tabNav', 1);
                $this->assign('nav', 3);
                $this->assign("referer", $_SERVER["HTTP_REFERER"]);
                $this->assign('info', $info);
                $this->display("orderdetails");
            }
        }

    }


    /**
     * 版本迭代，此接口暂时不用了，为防止功能迁移遗漏暂时保留
     * 申请签单
     * author: mcj
     * @return [type] [description]
     */
    public function applyorder()
    {
        if ($_POST) {
            $id = I("post.id");
            $data = array(
                "qiandan_companyid" => $_SESSION["u_userInfo"]["id"],
                "qiandan_jine" => I("post.jiage"),
                "qiandan_addtime" => time(),
                "qiandan_info" => I("post.remark"),
                "qiandan_status" => 0
            );
            //查询该订单是否已被申请
            $result = D("Orders")->getOrderInfoById($id);
            unset($result['tel8']);
            if (count($result) > 0) {
                if (empty($result["qiandan_companyid"])) {
                    // 2013-10-01 后的订单方可申请签单
                    if (strtotime("2013-10-01") < $result["time"]) {
                        $i = D("Orders")->editOrder($id, $data);
                        if ($i !== false) {
                            //导入扩展文件
                            import('Library.Org.Util.App');
                            $app = new \App();
                            //记录日志
                            $data = array(
                                "username" => $_SESSION["u_userInfo"]["jc"],
                                "userid" => $_SESSION["u_userInfo"]["id"],
                                "ip" => $app->get_client_ip(),
                                "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                                "info" => "用户签单申请 成功",
                                "time" => date("Y-m-d H:i:s"),
                                "action" => CONTROLLER_NAME . "/" . ACTION_NAME,
                                "remark" => "订单号:" . $id
                            );
                            D("Loguser")->addLog($data);
                            $this->ajaxReturn(array("data" => "", "info" => "签单申请成功！", "status" => 1));
                        }
                    }
                    $this->ajaxReturn(array("data" => "", "info" => "该订单时间太久远了,已无法签单", "status" => 0));
                }
                $this->ajaxReturn(array("data" => "", "info" => "该订单已被其他装修公司签单", "status" => 0));
            }
            $this->ajaxReturn(array("data" => "", "info" => "该订单已被客服删除！", "status" => 0));
        } else {
            $id = I("get.id");
            //获取申请签单模版
            $this->assign("orderid", $id);
            $tmp = $this->fetch("applytmp");
            $this->ajaxReturn(array("data" => $tmp, "info" => "", "status" => 1));
        }
    }


    /**
     * 取消已签单
     */
    public function unqiandanorder()
    {
        if ($_POST) {
            $id = I("post.id");
            //查询该订单的分配信息
            $result = D("Orders")->getAllocationOrder($id, $_SESSION["u_userInfo"]["id"]);
            if (count($result) <= 0) {
                $this->ajaxReturn(array("data" => "", "info" => "此订单不是贵公司的,无法取消已签单!", "status" => 0));
            }
            //查询该订单信息
            $result = D("Orders")->getOrderInfoById($id);
            unset($result['tel8']);
            if (count($result) > 0) {
                if (
                    $result["qiandan_companyid"] == $_SESSION["u_userInfo"]["id"]
                    && $result["qiandan_status"] == 1
                ) {
                    //记录订单已签单信息
                    $lastdata = array(
                        'orderid' => $result['id'], //订单号
                        "qiandan_companyid" => $result['qiandan_companyid'], //签单公司 id 号
                        "qiandan_mianji" => $result['qiandan_mianji'], // 签单面积
                        "qiandan_jine" => $result['qiandan_jine'], //签单金额
                        "qiandan_status" => $result['qiandan_mianqiandan_statusji'], //状态 默认空 0为申请签单确认 1为确认签单
                        "qiandan_addtime" => $result['qiandan_addtime'], //签单申请时间
                        "qiandan_chktime" => $result['qiandan_chktime'], //签单审核时间(签单或取消)
                        "qiandan_remark" => $result['qiandan_remark'], //签单备注
                        "qiandan_remark_lasttime" => $result['qiandan_remark_lasttime'], //最后修改签单备注的时间
                        "qiandan_info" => $result['qiandan_info'], //签单信息, 由装修公司填写
                    );

                    //把签单数据重置为空
                    $data = array(
                        "qiandan_companyid" => '', //签单公司 id 号
                        "qiandan_mianji" => '', // 签单面积
                        "qiandan_jine" => '', //签单金额
                        "qiandan_status" => '', //状态 默认空 0为申请签单确认 1为确认签单
                        "qiandan_addtime" => '', //签单申请时间
                        "qiandan_chktime" => '', //签单审核时间(签单或取消)
                        "qiandan_remark" => '', //签单备注
                        "qiandan_remark_lasttime" => '', //最后修改签单备注的时间
                        "qiandan_info" => '', //签单信息, 由装修公司填写
                    );

                    $i = D("Orders")->editOrder($id, $data);
                    if ($i !== false) {
                        //导入扩展文件
                        import('Library.Org.Util.App');
                        $app = new \App();
                        unset($data);
                        //记录日志操作日志
                        $data = array(
                            "username" => $_SESSION["u_userInfo"]["jc"],
                            "userid" => $_SESSION["u_userInfo"]["id"],
                            "ip" => $app->get_client_ip(),
                            "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                            "info" => "用户签单申请 成功",
                            "time" => date("Y-m-d H:i:s"),
                            "action" => CONTROLLER_NAME . "/" . ACTION_NAME,
                            "remark" => "订单号:" . $id
                        );
                        D("Loguser")->addLog($data);

                        //记录历史已签单日志
                        $datalo = array(
                            "username" => $_SESSION["u_userInfo"]["jc"],
                            "userid" => $_SESSION["u_userInfo"]["id"],
                            "ip" => $app->get_client_ip(),
                            "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                            "info" => json_encode($lastdata),
                            "time" => date("Y-m-d H:i:s"),
                            "action" => CONTROLLER_NAME . "/" . ACTION_NAME,
                            "remark" => 'order_unqiandan'
                        );
                        D("Loguser")->addLog($datalo);
                        $this->ajaxReturn(array("data" => "", "info" => "取消已签单成功！", "status" => 1));
                    }

                }
                $this->ajaxReturn(array("data" => "", "info" => "该订单状态不是已签单!", "status" => 0));
            }
            $this->ajaxReturn(array("data" => "", "info" => "该订单已被客服删除！", "status" => 0));
        } else {
            $id = I("get.id");
            //获取取消已签单模版
            $this->assign("orderid", $id);
            $tmp = $this->fetch("unqiandantmp");
            $this->ajaxReturn(array("data" => $tmp, "info" => "", "status" => 1));
        }
    }


    /**
     * 删除装修公司回访记录
     * @return [type] [description]
     */
    public function delreview()
    {
        if ($_POST) {
            $id = I("post.id");
            //查询是否是该公司的回访记录
            $result = D("Ordercompanyreview")->getReviewCountById($id, $_SESSION["u_userInfo"]["id"]);
            if ($result > 0) {
                $i = D("Ordercompanyreview")->deleteReview($id, $_SESSION["u_userInfo"]["id"]);
                if ($i !== false) {
                    $this->ajaxReturn(array("data" => "", "info" => "", "status" => 1));
                }
                $this->ajaxReturn(array("data" => "", "info" => "操作失败,请刷新重试！", "status" => 0));
            }
            $this->ajaxReturn(array("data" => "", "info" => "这不是您的回访记录,您无权此操作！", "status" => 0));
        }
    }

    /**
     * 取消订单申请
     * @return [type] [description]
     */
    public function unapplyorder()
    {
        if ($_POST) {
            $id = I("post.id");
            $data = array(
                "qiandan_companyid" => 0,
                "qiandan_jine" => "",
                "qiandan_addtime" => "",
                "qiandan_info" => "",
                "qiandan_status" => null
            );
            //查询该订单是否已被申请
            $result = D("Orders")->getOrderInfoById($id);
            unset($result['tel8']);
            if (count($result) > 0) {
                if ($result["qiandan_companyid"] == $_SESSION["u_userInfo"]["id"]) {
                    $i = D("Orders")->editOrder($id, $data);
                    if ($i !== false) {
                        //导入扩展文件
                        import('Library.Org.Util.App');
                        $app = new \App();
                        //记录日志
                        $data = array(
                            "username" => $_SESSION["u_userInfo"]["jc"],
                            "userid" => $_SESSION["u_userInfo"]["id"],
                            "ip" => $app->get_client_ip(),
                            "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                            "info" => "用户取消签单申请 成功",
                            "time" => date("Y-m-d H:i:s"),
                            "action" => CONTROLLER_NAME . "/" . ACTION_NAME
                        );
                        D("Loguser")->addLog($data);
                        $this->ajaxReturn(array("data" => "", "info" => "取消签单成功！", "status" => 1));
                    }
                }
                $this->ajaxReturn(array("data" => "", "info" => "该签单不是您签的,无权取消！", "status" => 0));
            }
            $this->ajaxReturn(array("data" => "", "info" => "该订单已被客服删除！", "status" => 0));
        }
    }

    /**
     * 查看自主签单详细信息
     * @return [type] [description]
     */
    public function lookinitiativeorder()
    {
        if ($_POST) {
            $id = I("post.id");
            //查询自主签单信息、
            $order = D("Orderscompanyreport")->getOrderById($id, $_SESSION["u_userInfo"]["id"]);
            if (count($order) > 0) {
                $this->assign("order", $order);
                $tmp = $this->fetch("initiativeordertmp");
                $this->ajaxReturn(array("data" => $tmp, "info" => "", "status" => 1));
            }
            $this->ajaxReturn(array("data" => "", "info" => "该订单不是您的订单,无权查看！", "status" => 0));
        }
    }


    /**
     * 添加自主签单
     * @return [type] [description]
     */
    public function addinitiativeorder()
    {
        if ($_POST) {
            $data = array(
                "zxfs" => I("post.zxfs"),
                "name" => I("post.name"),
                "sex" => I("post.sex"),
                "tel168" => I("post.tel"),
                "cs" => $_SESSION["u_userInfo"]["cs"],
                "qx" => I("post.qx"),
                "xiaoqu" => I("post.xiaoqu"),
                "dz" => I("post.dz"),
                "huxing" => I("post.huxing"),
                "shi" => I("post.shi"),
                "ting" => I("post.ting"),
                "wei" => I("post.wei"),
                "lx" => I("post.lx"),
                "lxs" => I("post.lxs"),
                "fangshi" => I("post.fangshi"),
                "fengge" => I("post.fengge"),
                "yusuanjt" => I("post.yusuan"),
                "remarks" => I("post.remarks"),
                "order_company_id" => $_SESSION["u_userInfo"]["id"],
                "time_add" => time(),
                "mianji" => I("post.mianji"),
                "time_qd" => I("post.time_qd")
            );
            $i = D("Orderscompanyreport")->addOrder($data);
            if ($i !== false) {
                //导入扩展文件
                import('Library.Org.Util.App');
                $app = new \App();
                //记录日志
                $data = array(
                    "username" => $_SESSION["u_userInfo"]["jc"],
                    "userid" => $_SESSION["u_userInfo"]["id"],
                    "ip" => $app->get_client_ip(),
                    "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                    "info" => "用户新增自主签单 成功",
                    "time" => date("Y-m-d H:i:s"),
                    "action" => CONTROLLER_NAME . "/" . ACTION_NAME
                );
                D("Loguser")->addLog($data);
                $this->ajaxReturn(array("data" => "", "info" => "操作成功！", "status" => 1));
            }
            $this->ajaxReturn(array("data" => "", "info" => "操作失败！", "status" => 0));
        } else {
            //获取户型列表
            //获取户型列表
            $hx = D("Common/Huxing")->gethx();
            $this->assign("hx", $hx);
            //获取装修风格列表
            $fg = D("Common/Fengge")->getfg();
            $this->assign("fengge", $fg);
            //获取装修方式
            $fangshi = D("Common/Fangshi")->getfs();
            $this->assign("fangshi", $fangshi);
            //获取当前城市
            $citys = D("Area")->getCityArray($_SESSION["u_userInfo"]["cs"]);
            $citys["shen"] = $citys["shen"][0];
            $citys["shi"] = $citys["shi"][$_SESSION["u_userInfo"]["cs"]];
            $this->assign("citys", $citys);
            $tmp = $this->fetch("addinitiativeorder");
            $this->ajaxReturn(array("data" => $tmp, "info" => "", "status" => 1));
        }
    }

    /**
     * 装修公司主动签单
     */
    public function initiative()
    {
        $user = $_SESSION["u_userInfo"];
        //获取装修公司的基本信息
        $baseInfo = $this->baseInfo;
        $info["user"] = $baseInfo;
        //获取订单信息
        $pageIndex = 1;
        $pageCount = 10;
        if (I("get.p") !== "") {
            $pageIndex = I("get.p");
        }

        if (I("get.keyword") !== "") {
            $text = I("get.keyword");
            $info['orderInfo']["keyword"] = $text;
        }

        if (I("get.status") !== "") {
            $on = I("get.status");
            if ($on != 0 && $on != 1) {
                $on = null;
            }
            $info['orderInfo']["on"] = $on;
        }

        $orders = $this->getInitiativeOrders($_SESSION["u_userInfo"]["id"], $on, $text, $pageIndex, $pageCount);
        $info["orderInfo"]["orders"] = $orders["orders"];
        $info["orderInfo"]["page"] = $orders["page"];

        //状态框
        $status = array(
            array("value" => "-1", "name" => "全部"),
            array("value" => "1", "name" => "已审核"),
            array("value" => "0", "name" => "未审核")
        );
        $info["orderInfo"]["status"] = $status;
        //侧边栏
        $this->assign("nav", 3);
        //tab栏
        $this->assign("tabNav", 2);
        $this->assign("info", $info);
        $this->display();
    }

    /**
     * 删除自主签单
     * @return [type] [description]
     */
    public function delinitiativeorder()
    {
        if ($_POST) {
            $id = I("post.id");
            //查询自主签单信息、
            $order = D("Orderscompanyreport")->getOrderById($id, $_SESSION["u_userInfo"]["id"]);
            if (count($order) > 0) {
                $data = array(
                    "deleted" => 1
                );
                $i = D("Orderscompanyreport")->editOrder($id, $data);
                if ($i !== false) {
                    //导入扩展文件
                    import('Library.Org.Util.App');
                    $app = new \App();
                    //记录日志
                    $data = array(
                        "username" => $_SESSION["u_userInfo"]["jc"],
                        "userid" => $_SESSION["u_userInfo"]["id"],
                        "ip" => $app->get_client_ip(),
                        "user_agent" => $_SERVER["HTTP_USER_AGENT"],
                        "info" => "用户删除自主签单 成功",
                        "time" => date("Y-m-d H:i:s"),
                        "action" => CONTROLLER_NAME . "/" . ACTION_NAME
                    );
                    D("Loguser")->addLog($data);
                    $this->ajaxReturn(array("data" => "", "info" => "操作成功！", "status" => 1));
                }
            }
            $this->ajaxReturn(array("data" => "", "info" => "该订单不是您的订单,无权删除！", "status" => 0));
        }
    }

    /**
     * 保存订单查看密码
     * @return [type] [description]
     */
    public function saveorderpass()
    {
        if (IS_POST) {
            $pass = I('post.pass');
            if (empty($pass)) {
                $this->ajaxReturn(array('data' => '', 'info' => '密码不能为空', 'status' => 0));
            }
            $data = array(
                'comid' => $_SESSION['u_userInfo']['id'],
                'pass' => md5($pass),
                'addtime' => date('Y-m-d H:i:s')
            );
            $i = D('Orderpass')->setOrderPass($data);
            $user = session('u_userInfo');
            //查看订单日志
            $logData = [
                'company_id' => $user['id'],
                'company_name' => $this->company_name,
                'act_name' => '设置订单查看密码',
                'act_status' => 'success',
                'act_time' => time(),
            ];
            if ($i !== false) {
                //写入查看订单日志
                D('Logorderpass')->saveLog($logData);
                $_SESSION['u_userInfo']['orderpass'] = 1;
                $this->ajaxReturn(array('data' => '', 'info' => '操作成功！', 'status' => 1));
            } else {
                $logData['act_status'] = 'failed';
                D('Logorderpass')->saveLog($logData);
                $this->ajaxReturn(array('data' => '', 'info' => '操作失败！', 'status' => 0));
            }
        }
        $this->ajaxReturn(array('data' => '', 'info' => '操作失败！', 'status' => 0));
    }


    public function huiFang()
    {
        //导航栏选中设置
        $this->assign('tabNav', 1);
        $this->assign('nav', 3);
        $info["user"] = $this->baseInfo;

        $user = $_SESSION["u_userInfo"];
        $this->assign('user', $user);
        //检查是否有查看订单权限
        $this->assign('orderpass', $user["orderpass"]);

        $data = I('get.', null, 'trim,htmlspecialchars');
        //设置页面查询条件选择效果
        $this->assign('search_data', $data);

        //设置查找参数
        $p = empty($data['p']) ? 1 : $data['p'];
        $p_size = empty($data['p_size']) ? 20 : $data['p_size'];
        $search = empty($data['keyword']) ? '' : $data['keyword'];
        $isread = empty($data['isread']) ? '' : $data['isread'];


        $liang_fang_logic = D("Common/Logic/CompanyLiangFangCorrLogic");
        $count = $liang_fang_logic->getBackReplyCount($user['id'], $search, $isread);
        $list = $liang_fang_logic->getBackReply($user['id'], $search, $isread, $p, $p_size);
        $this->assign('list', $list);
        //分页
        import('Library.Org.Page.Page');
        //自定义配置项
        $config = array('prev', 'next');
        $page = new \Page($p, $p_size, $count, $config);
        $pageTmp = $page->show();
        $this->assign('page', $pageTmp);
        $this->assign("info", $info);
        $this->display('huifang');
    }

    /**
     * 订单密码短信发送
     */
    public function sendSms()
    {
        if (empty($this->baseInfo["id"])) {
            $this->ajaxReturn(["data" => "", "info" => "登录过期，请重新登录", "status" => 0]);
        }
        if (empty($this->baseInfo["tel_safe"]) || $this->baseInfo["tel_safe_chk"] == 0) {
            $this->ajaxReturn(["data" => "", "info" => "请先绑定安全手机", "status" => 0]);
        }
        $_POST['tel'] = $this->baseInfo["tel_safe"];
        R("Common/Sms/sendsms");
        die();
    }

    /**
     * 验证码验证（并写入检测微信session）
     */
    public function checkSms()
    {
        if (empty($this->baseInfo["tel_safe"])) {
            $this->ajaxReturn(["data" => "", "info" => "登录过期，请重新登录！", "status" => 0]);
        }
        $result = R('Common/Login/smsCheck', [$_POST['code'], $this->baseInfo["tel_safe"]]);
        if ($result !== true) {  //此处验证码验证不通过
            $this->ajaxReturn($result);
        }
        $_SESSION["u_userInfo"]["wxcheckpass"] = 1;
        die();
    }

    var $bool = true;

    /**
     * 获取二维码图片
     * @return [type] [description]
     */
    private function getMyQrCode()
    {
        //获取绑定的二维码
        import('Library.Org.Util.Mywechat');
        $Mywechat = new \Mywechat();
        $qr = $Mywechat->getQRUrl(92);
        if ($qr !== false) {
            //获取二维码后,添加二维码日志
            if ($qr['ticket']) {
                $_SESSION['u_wx_ticket'] = $qr['ticket'];
            }
            //添加获取票据日志
            $datatk = array();
            $datatk['wx_ticket_now'] = $qr['ticket'];
            $datatk['wx_ticket_now_md5'] = md5($qr['ticket']);
            $datatk['userid'] = $_SESSION['u_userInfo']["id"];
            $datatk['type'] = 'qizuangfw';
            $datatk['sceneid'] = $qr["scene_id"];
            $datatk['time_add'] = time();
            $i = D("Logwxticket")->addLog($datatk);
            if ($i !== false) {
                return $qr;
            }
        }
        return null;
    }

    /**
     * 获取登录临时二维码
     * @return mixed
     */
    private function getMyLoginQrCode()
    {
        //获取绑定的二维码
        import('Library.Org.Util.Mywechat');
        $Mywechat = new \Mywechat();
        $qr = $Mywechat->getQRUrl(999);
        if ($qr !== false) {
            //获取二维码后,添加二维码日志
            if ($qr['ticket']) {
                $_SESSION['u_wx_login_ticket'] = $qr['ticket'];
            }
            //添加获取票据日志
            $datatk = array();
            $datatk['wx_ticket_now'] = $qr['ticket'];
            $datatk['wx_ticket_now_md5'] = md5($qr['ticket']);
            $datatk['userid'] = $_SESSION['u_userInfo']['id'];
            $datatk['type'] = 'qizuangfw';
            $datatk['sceneid'] = $qr['scene_id'];
            $datatk['time_add'] = time();
            $i = D('Logwxticket')->addLog($datatk);
            if ($i !== false) {
                return $qr;
            }
        }
        return null;
    }

    /**
     * 获取装修公司自主签单
     * @return [type] [description]
     */
    private function getInitiativeOrders($comid, $on, $text, $pageIndex, $pageCount)
    {
        //过滤
        //强制数字整数
        $pageIndex = intval($pageIndex) <= 0 ? 1 : intval($pageIndex);
        $pageCount = intval($pageCount) <= 0 ? 1 : intval($pageCount);

        $count = D("Orderscompanyreport")->getOrdersCount($comid, $on, $text);

        if ($count > 0) {
            import('Library.Org.Page.Page');
            //自定义配置项
            $config = array("prev", "next");
            $page = new \Page($pageIndex, $pageCount, $count, $config);
            $pageTmp = $page->show();
            $orders = D("Orderscompanyreport")->getOrders($comid, $on, $text, ($page->pageIndex - 1) * $pageCount, $pageCount);

            return array("orders" => $orders, "page" => $pageTmp);
        }
        return $orders;
    }

    /**
     * 查询订单信息
     * @param  [type] $comid [description]
     * @param  [type] $limit [description]
     * @return [type]        [description]
     */
    private function getOrders($comid, $text, $isread, $pageIndex, $pageCount)
    {
        //过滤
        //强制数字整数
        $pageIndex = intval($pageIndex) <= 0 ? 1 : intval($pageIndex);
        $pageCount = intval($pageCount) <= 0 ? 1 : intval($pageCount);

        $count = D("Orders")->getOrderListByComidCount($comid, $text, $isread);
        if ($count > 0) {
            import('Library.Org.Page.Page');
            //自定义配置项
            $config = array("prev", "next");
            $page = new \Page($pageIndex, $pageCount, $count, $config);
            $pageTmp = $page->show();
            $orders = D("Orders")->getOrderListByComid($comid, $text, $isread, ($page->pageIndex - 1) * $pageCount, $pageCount);
            return array("orders" => $orders, "page" => $pageTmp);
        }
        return $orders;
    }

    /**
     * 添加修改密码提醒(每隔30天提示修改一次密码)
     */
    private function checkPassTime($userInfo)
    {
        $check_alert = S('User:User:Orders:CheckAlert:' . $userInfo['id']);
        if ($check_alert != 1) {
            S('User:User:Orders:CheckAlert:' . $userInfo['id'], 1, 2592000);
            $this->assign('check_alert', 1);
        }
    }


    /**
     * 登录日志
     * @param $user [array] 用户信息
     * @param $info [string]  记录信息
     * @param $status [int]  登录状态
     */
    private function addLog($user, $info = "", $status = 1)
    {
        //导入扩展文件
        import('Library.Org.Util.App');
        $app = new \App();
        //记录日志
        $data = array(
            "username" => $user["name"],
            "userid" => $user["id"],
            "ip" => $app->get_client_ip(),
            "user_agent" => $_SERVER["HTTP_USER_AGENT"],
            "info" => $info,
            "time" => date("Y-m-d H:i:s"),
            "action" => CONTROLLER_NAME . "/" . ACTION_NAME,
            "status" => $status
        );
        D("Loguser")->addLog($data);
    }
}
