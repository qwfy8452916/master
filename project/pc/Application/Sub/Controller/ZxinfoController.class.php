<?php
/**
 * 小站文章页
 */
namespace Sub\Controller;
use Sub\Common\Controller\SubBaseController;

class ZxinfoController extends SubBaseController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        //导航栏标识
        $this->assign("tabIndex", 4);
        //添加顶部搜索栏信息
        $this->assign('serch_uri','http://'.C('QZ_YUMINGWWW').'/gonglue/search');
        $this->assign('serch_type','装修攻略');
        $this->assign('holdercontent','了解相关的装修知识');
        //显示头部导航栏效果
        $this->assign("nav_show", true);
        //导航栏显示默认效果
        $this->assign('choose_menu', '');
        //获取每日发布人数);
        $today = date('Y-m-d');
        $today_key = 'cache:fz:baojianum:' . $today;
        $fbrs = S($today_key);
        //随机生成获取报价的人数并且生成缓存数据
        if (empty($fbrs)) {
            $fbrs = rand(200, 1000);
            //设置缓存到明天凌晨
            S($today_key, $fbrs,strtotime('tomorrow')-time());
        }
        $this->assign("fbrs", $fbrs);
        //获取报价模版
        $this->assign("order_source",12);
        //根据渠道来源 来选择二维码
        $src = I('get.src','');
        if (!empty($src)){
            $orderSourceResult = D("OrderSource")->getOne($src);
            //根据sourceid获取微信管理信息
            $result = D("YySrcWeixin")->getOneBySourceid($orderSourceResult['id']);
        }
        if (!isset($result)) {
            $result = D("YySrcWeixin")->getDefaultData();
        }
        if (!empty($result)) {
            $this->assign("wx_title", $result['title']);
            $this->assign("wx_img", $result['img']);
        }
        $this->assign("cityinfo",$this->cityInfo);
    }

    public function index()
    {
        $cityInfo = $this->cityInfo;
        //移动端跳转处理
        if (ismobile()) {
            header('Location: http://'. C('MOBILE_DONAMES') .'/'.$cityInfo['bm'].'/zxinfo/');
            exit();
        }
        $this->setUrlOver();
        //文章分类和文章内容
        $cateGoryList = D('Infotype')->getTypes(2);
        foreach ($cateGoryList as $key => $value) {
            $cateGoryList[$key]['content'] = D('Littlearticle')->getArticleListNew($value['id'], $cityInfo['id'], 0, 4, '', 'addtime desc');
            foreach ($cateGoryList[$key]['content'] as $k=>$v){
                $desc = trim($v['description']);
                if (empty($desc)){
                    $cateGoryList[$key]['content'][$k]['description'] = mbstr(strip_tags(htmlspecialchars_decode($v['content'])), 0, 45, 'utf-8',false);
                }
            }
            $this->assign($value['shortname'], $cateGoryList[$key]);  //按照分类短名称进行分类赋值
        }
        //资讯页TDK
        $header['title'] = $cityInfo['name'] . '装修攻略_' . $cityInfo['name'] . '装修经验分享_' . $cityInfo['name'] . '建材导购指南_' . $cityInfo['name'] . '装修公司黑幕';
        $header['description'] = $cityInfo['name'] . '齐装网官方装修攻略基于广大业主装修真实经历和心得的装修攻略、装修经验分享、建材导购指南、装修公司黑幕等' . date('Y') . '年装修攻略应有尽有。';
        $header['keywords'] = $cityInfo['name'] . '装修攻略,' . $cityInfo['name'] . '装修经验分享,' . $cityInfo['name'] . '建材导购指南,' . $cityInfo['name'] . '装修公司黑幕';
        //canonical标签
        $header['canonical'] = 'http://' . $cityInfo['bm'] . '.' . C('QZ_YUMING') . '/zxinfo/';

        $this->assign('keys', $header);

        //获取当前城市装修公司前十
        $companyMap['cs'] = $cityInfo['id'];
        $companyMap['orderby'] = 'case_count desc,team_count desc,comment_score desc,info_time';
        $companyList = D('Common/Company')->getList($companyMap, 0, 10);
        $right_list['company'] = $companyList['result'];
        //获取当前城市人气前8设计师
        $designerMap['cs'] = $cityInfo['id'];
        $designerMap['orderby'] = 'a.pv+0 desc,a.id asc'; //PV为字符串 使用+0转成数字类型排序
        $right_list['designer'] = D('Common/User')->getDesingerListByCity($designerMap, 1, 8);
        $this->assign('rightlist', $right_list);

        $this->display();
    }


    //p.2.13.9分站资讯列表页改版
    public function category()
    {
        $cityInfo = $this->cityInfo;
        $category = I('get.category','');
            //移动端跳转处理
        if (ismobile()) {
            header('Location: http://'. C('MOBILE_DONAMES') .'/'.$cityInfo['bm'].'/zxinfo/'.$category.'/');
            exit();
        }
        if (is_numeric($category)){
            if (ismobile()) {
                header('Location: http://'. C('MOBILE_DONAMES') .'/'.$cityInfo['bm'].'/zxinfo/'.$category.'.html');
                exit();
            } else {
                $url = 'http://' . $cityInfo['bm'] . '.' . C('QZ_YUMING') . '/zxinfo/'.$category.'.html';
                header('Location: $url' );
                exit();
            }
        }

        $this->setUrlOver();
            //城市ID
        $companyMap['cs'] = $cityInfo['id'];
            //跳转链接的头部
        $jumpUrlBm = $cityInfo['bm'];
            //分站的bm头
        $this->assign('cityBm', $cityInfo['bm']);

        //1.0获取分站的文章列表带分页
        $cate = D('Infotype')->getTypeInfoByshortname($category);
        if (empty($cate)){
            $this->_empty();die();
        }
        $articleList = $this->getZxArticleList($cate['id'], $companyMap['cs'], '', 9);

        $this->assign('articleList', $articleList);

        //2.0获取装修公司前五个
        $companyMap['orderby'] = 'comment_score desc,id';
        $companyList = D('Common/Company')->getList($companyMap, 0, 5);
        $leftCompanyList = $companyList['result'];
        $this->assign('leftCompanyList', $leftCompanyList);

        //3.0获取三条案例，分站的装修案例,分站没有数据则找全国的数据
        $orderBy = 'time desc';
        $cityCase = D('Common/Cases')->getCaseList(['cs' => ['eq', $companyMap['cs']]], $orderBy);
        $cityCase = $this->addDifferentBm($cityCase, $cityInfo['bm']);
        $this->assign('jumpUrlBm', $jumpUrlBm);
            //如果装修案例条数小于3,则用全国的装修案例补
        if(count($cityCase) < 3) {
            $countryCount = 3 - count($cityCase);
            $wwwCityCase = D('Common/Cases')->getCaseList(['cs' => ['eq','000001']], $orderBy, 0, $countryCount);
            $wwwCityCase = $this->addDifferentBm($wwwCityCase, 'www');
            $cityCase = array_merge_recursive($cityCase, $wwwCityCase);
            $this->assign('jumpUrlBm', 'www');
        }
        $this->assign('cityCase', $cityCase);

        //4.0资讯页TDK
        $header['title'] =  str_ireplace('%s',$cityInfo['name'],$cate['title']);
        $titleArray =  explode('-',$header['title']);
        $pagecontent = '';
        if ($articleList['nowpage'] > 1){
            $pagecontent = '_第'.$articleList['nowpage'].'页';
        }
        if (isset($titleArray[1])){
            $header['title'] = $titleArray[0].$pagecontent.'-'.$titleArray[1];
        }else{
            $header['title'] = $titleArray[0].$pagecontent;
        }
        $header['description'] = str_ireplace('%s',$cityInfo['name'],$cate['description']);
        $header['keywords'] = str_ireplace('%s',$cityInfo['name'],$cate['keywords']);

        //获取后台配置的TDK
        $config = [
            'cs' => $this->cityInfo['id'], //城市id
            'model' => 3, //模块 1.首页 2.装修公司 3.装修资讯
            'category' => I('get.category'), //装修资讯子频道栏目
            'location' => 1, //位置 1.pc端 2.移动端
            'page' => I('get.page'), //分页
        ];
        $header = getCommonManageTdk($header,$config);
        //canonical标签
        $header['canonical'] = 'http://' . $cityInfo['bm'] . '.' . C('QZ_YUMING') . $_SERVER['REQUEST_URI'];
        $this->assign('header', $header);
        //添加左边栏默认选中效果
        $this->assign('cate', $cate);
        $this->assign('source', 18080258);

        //免费通话模版
        $this->assign('freetel',$this->fetch(T("Common@Zbfb/freetel")));
        $this->display();
    }
    //将每条城市的信息中都加入bm头来区分是总站还是分站
    private function addDifferentBm($case, $bm)
    {
        for($i = 0; $i < count($case); $i++)
        {
            $case[$i]['bm'] = $bm;
        }
        return $case;
    }

    /**
     * 文章详情页
     * @return [type] [description]
     */
    public function article()
    {
        $id = intval(I('get.id',0));
        if ($id <= 0) {
            $this->_error();
        }
        //移动端跳转处理
        if (ismobile()) {
            exit(header('Location: http://' . C('MOBILE_DONAMES') . '/' . $this->cityInfo['bm'] . '/zxinfo/' . $id . '.html'));
        }

        $articleInfo = S('Cache:SubArticle:Littlearticle:' . $id);

        if (empty($articleInfo)) {
            $article = $this->getArticleInfo($id, $this->cityInfo['id']);
            if (empty($article)) {
                $this->_error();
            }

            if (empty($article['now'])) {
                $this->_error();
            }

            $articleInfo['article'] = $article;
            //获取看过本文的还看过的文章
            $recommendArticles = $this->getRecommendArticles($articleInfo['article']['now']['classid'], $this->cityInfo['id'],$id);
            $articleInfo['recommendArticles'] = $recommendArticles;
            //最新发布
            $newarticles = $this->getRecommendArticles(0, $this->cityInfo['id'],$id,9);
            $articleInfo['newarticles'] = $newarticles;
            S('Cache:SubArticle:Littlearticle:' . $id, $articleInfo, 60 * 15);
        }

        //判断该文章是否是该城市的文章
        if ($articleInfo['article']['now']['cs'] != $this->cityInfo['id']) {
            $this->_error();
        }

        //判断是否是搜索引擎蜘蛛
        $robotIsTrue = B('Common\Behavior\RobotCheck');
        if ($robotIsTrue === false) {
            $ips = OP('ignore_ips');
            $ignore_ip_array = explode(',', $ips);
            foreach ($ignore_ip_array as $k => $v) {
                $ignore_ip_array[$k] = ip2long($v);
            }
            import('Library.Org.Util.App');
            $ip = \App::get_client_ip();
            $true_ip = ip2long($ip);
            if (!in_array($true_ip, $ignore_ip_array)) {
                $status = S('Cache:SubArticle:' . $ip . $id);
                if ($status != 1) {
                    //没有访问记录，浏览量+1，生成新缓存（根据ip.文章ID）
                    D('Littlearticle')->updateRealView($id);
                    S('Cache:SubArticle:' . $ip . $id, 1, strtotime('tomorrow') - 1 - time());
                }
            }
        }

        //查询用户是否关注过该案例
        $articleInfo['collect'] = false;
        if (isset($_SESSION['u_userInfo'])) {
            $count = D('Usercollect')->getCollectCount($id, $_SESSION['u_userInfo']['id'], 3);
            if ($count > 0) {
                $articleInfo['collect'] = true;
            }
        }

        $info['head']['canonical'] = 'http://' . $this->cityInfo['bm'] . '.' . C('QZ_YUMING') . '/zxinfo/' . $id . '.html';

        //获取该分类的分类信息
        $keys['title'] = $articleInfo['article']['now']['title'];
        $keys['keywords'] = $articleInfo['article']['now']['keywords'];
        $keys['description'] = $articleInfo['article']['now']['description'];
        $this->assign('keys', $keys);
        //更新阅读量
        D('Littlearticle')->updatePv($id);
        //安全验证码
        $safe = getSafeCode();
        $this->assign('safecode', $safe['safecode']);
        $this->assign('safekey', $safe['safekey']);
        $this->assign('ssid', $safe['ssid']);
        //装修公司排行榜
        $recomcompany = S('Cache:SubArticle:Recomcompany'.$this->cityInfo['bm']);
        if ($recomcompany === false){
            $condition['orderby'] = 'case_count desc,team_count desc,comment_score desc,info_time';
            $condition['cs'] = $this->cityInfo['id'];
            $recomcompanyList = D("Common/Company")->getList($condition,0,5);
            $recomcompany = $recomcompanyList['result'];
            S('Cache:SubArticle:Recomcompany'.$this->cityInfo['bm'],$recomcompany,3600);
        }
        $this->assign('recomcompany',$recomcompany);

        //获取报价模版
        $this->assign('orderTmp', $this->fetch(T('Common@Order/orderTmp')));

        //获取底部弹层
        $this->assign('adv_bottom',$this->fetch(T('Common@Order/zb_bottom_b')));

        //流量部推广统计
        $this->promoStats($id);

        $this->assign('articleInfo', $articleInfo);
        //显示头部导航栏效果
        $this->assign('info', $info);
        $this->display();
    }

    //流量部推广统计
    public function promoStats($id)
    {
        //获取Cookie
        $isMark = cookie('contentPromoMark');
        //如果Cookie不存在
        if(empty($isMark['module'])){
            //过期时间 = 今天最后一秒时间戳 - 当前时间戳
            $expireTime = strtotime(date('Y-m-d').' 23:59:59') - time();
            $cookieVar = array('module' => 'subarticle','id' => $id);
            //指定cookie保存时间
            cookie('contentPromoMark',$cookieVar, array('expire' => $expireTime,'domain' => '.'.C('QZ_YUMING')));
        }
    }

    /**
     * 分站文章旧版链接跳转
     * @return [type] [description]
     */
    public function remoteArticle()
    {
        $id = intval(I('get.id'));
        if ($id > 0) {
            header('HTTP/1.1 301 Moved Permanently');
            exit(header('Location:http://' . $this->cityInfo['bm'] . '.' . C('QZ_YUMING') . '/zxinfo/' . $id . '.html'));
        } else {
            exit($this->_error());
        }
    }

    /**
     * 获取文章信息
     * @param  [type] $id       [文章编号]
     * @param  [type] $category [文章类别]
     * @return [type]           [description]
     */
    private function getArticleInfo($id, $cs)
    {
        $result = D('Littlearticle')->getLittleArticleInfo($id, $cs);
        $article = [];
        foreach ($result as $key => $value) {
            if (!array_key_exists($value['action'], $article)) {
                $title = strstr($value['title'], '_', true);
                if ($title !== false) {
                    $value['title'] = $title;
                }
                $article[$value['action']] = $value;
            }
        }
        if (isset($article['now'])) {
            //查询文章关键字，替换成内链
            $keywords = D('Wwwarticlekeywords')->getKeywordsRelate($id, 'subarticle');

            if (!empty($keywords)) {
                //优先匹配长度长的
                usort($keywords, function ($a, $b) {
                    if (mb_strlen($a['name']) == mb_strlen($b['name'])) {return 0;}
                    return (mb_strlen($a['name']) > mb_strlen($b['name'])) ? -1 : 1;
                });

                $list = [];
                $replaceLink = [];
                $replaceImg = [];

                foreach ($keywords as $key => $value) {
                    $list[] = '/' . trim($value['name']) . '/';
                }

                //抽出文章中的所有链接，避免替换链接出现重叠现象(链接套链接)
                $linkPattern = '/<a.*?>.*?<\/a>/i';
                preg_match_all($linkPattern, $article['now']['content'], $linkMatches);
                if (count($linkMatches[0]) > 0) {
                    foreach ($linkMatches[0] as $key => $value) {
                        //将图片替换成变量占位符
                        $article['now']['content'] = str_replace($value, '#&!&#', $article['now']['content']);
                        $replaceLink[] = $value;
                    }
                }

                //抽出文章中的图片
                $pattern = '/<img.*?\/>/i';
                preg_match_all($pattern, $article['now']['content'], $matches);
                if (count($matches[0]) > 0) {
                    foreach ($matches[0] as $key => $value) {
                        //将图片替换成变量占位符
                        $article['now']['content'] = str_replace($value, '%s', $article['now']['content']);
                        $replaceImg[] = $value;
                    }
                }

                //注意避免长关键词套短关键词的情况 <a>这是<a>关键词</a></a>
                foreach ($list as $key => $value) {
                    preg_match_all($value, $article['now']['content'], $matches);
                    if (count($matches[0]) > 0) {
                        $link = '<a href="' . $keywords[$key]['href'] .'" target="_blank" class="inlink-word-color">' . $keywords[$key]['name'] . '</a>';
                        $temp = '#A' . md5($link) . 'Z#';
                        $article['now']['content'] = preg_replace($value, $temp, $article['now']['content'], 1);
                    }
                }
                foreach ($list as $key => $value) {
                    $link = '<a href="' . $keywords[$key]['href'] .'" target="_blank" class="inlink-word-color">' . $keywords[$key]['name'] . '</a>';
                    $temp = '#A' . md5($link) . 'Z#';
                    $article['now']['content'] = str_replace($temp, $link, $article['now']['content']);
                }

                //将所有的图片依次填充到原来位置
                foreach ($replaceImg as $key => $value) {
                    $article['now']['content'] = preg_replace('/\%s/', $value, $article['now']['content'], 1);
                }

                //将所有的链接依次填充到原来位置
                foreach ($replaceLink as $key => $value) {
                    $article['now']['content'] = preg_replace('/#&!&#/', $value, $article['now']['content'], 1);
                }
            }
        }
        return $article;
    }
    /**
     * 获取推荐的文章
     * @param  [type] $classid [description]
     * @param  [type] $limit   [description]
     * @return [type]          [description]
     */
    private function getRecommendArticles($classid, $cs,$aid,$limit = 6)
    {
        //获取相同分类的点击量最高的文章
        $recommendArticles = D('Littlearticle')->getArticleListNew($classid, $cs, 0, $limit, '', 'addtime desc');
        if (empty($recommendArticles)) {
            return [];
        }
        foreach ($recommendArticles as $key => $value) {
            if ($value['id'] == $aid){  //如果和本文章相同，则去除
                unset($recommendArticles[$key]);
            }
            $title = strstr($value["title"], "_", true);
            if ($title !== false) {
                $recommendArticles[$key]["title"] = $title;
            }
        }
        //shuffle($recommendArticles);
        return array_slice($recommendArticles, 0, $limit-1);
    }

        /**
     * 获取资讯列表页文章列表
     * @param  string  $id        [分类编号]
     * @param  integer $pageIndex [description]
     * @param  integer $pageCount [description]
     * @param  boolean $isTop     [是否置顶]
     * @return [type]             [description]
     */
    private function getZxArticleList($category = '', $cs, $pageIndex = 1, $pageCount = 5, $keyword = "", $isTop = true)
    {
        //过滤
        $pageIndex = intval($pageIndex) <= 0 ? 1 : intval($pageIndex);
        $pageCount = intval($pageCount) <= 0 ? 1 : intval($pageCount);

        $count = D("Littlearticle")->getArticleListCount($category,$cs,$keyword);
        if($count > 0){
            import('Library.Org.Page.SPage');
            if(!empty($category)){
                //根据category获取 shortname
                $categorys = D("Littlearticle")->getCategoryByCid($category);
                $page = new \SPage($count, $pageCount, array(
                    'templet' => '/zxinfo/list-' . $categorys['shortname'] . '-[PAGE].html',
                    'firstUrl' => '/zxinfo/' . $categorys['shortname'] . '/'
                ));
            }else{
                $page = new \SPage($count, $pageCount, array(
                    'templet' => '/zxinfo/list-[PAGE].html',
                    'firstUrl' => '/zxinfo/'
                ));
            }

            $pageTmp =  $page->show();
            $result = D("Littlearticle")->getArticleListNew($category,$cs,($page->nowPage-1)*$pageCount,$pageCount,$keyword);
            foreach ($result as $key => $value) {
                $title = strstr($value["title"],"_",true);
                if($title !== false){
                    $result[$key]["title"] = $title;
                }
                $desc = trim($value['description']);
                if (empty($desc)){
                    $result[$key]['description'] = mbstr(strip_tags(htmlspecialchars_decode($value['content'])), 0, 150, 'utf-8',false);
                }
                $result[$key]["img_host"] = "qiniu";
                $alt = get_all_image_alt($value['content']);
                $result[$key]["alt"] = $alt;
                if(!empty($value["img"])){
                    $exp = explode(",", $value["img"]);
                    $exp = array_filter($exp);
                    foreach ($exp as $k => $val) {
                         if(!strpos($val,C('QINIU_DOMAIN'))){
                            $path ="http://".C('STATIC_HOST1')."/".$val;
                            $exp[$k]  = $path;
                        }
                    }

                    $result[$key]["img"] = $exp;
                }
            }
            return array("articles"=>$result,"page"=>$pageTmp,'nowpage'=>$page->nowPage);
        }
        return array("articles"=>[],"page"=>'','nowpage'=>0);
    }

    /**
     * 进行路由闭合操作
     * @return bool
     */
    protected function setUrlOver()
    {
        $uri = $_SERVER['REQUEST_URI'];
        preg_match('/html$/', $uri, $m);
        if (count($m) == 0) {
            preg_match('/\/$/', $uri, $m);
            $parse = parse_url($uri);
            if (count($m) == 0 && empty($parse["query"])) {
                header("HTTP/1.1 301 Moved Permanently");
                if (isSsl()) {
                    $http = "https://";
                } else {
                    $http = "http://";
                }
                header("Location: " . $http . $_SERVER["HTTP_HOST"] . $uri . "/");
                die();
            }
        }
        return true;
    }
}